# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Core Properties #
nifi.flow.configuration.file={{ nifi_flow_configuration_file }}
nifi.flow.configuration.archive.enabled={{ nifi_flow_configuration_archive_enabled | ternary('true', 'false') }}
nifi.flow.configuration.archive.dir={{ nifi_flow_configuration_archive_dir }}
nifi.flow.configuration.archive.max.time={{ nifi_flow_configuration_archive_max_time }}
nifi.flow.configuration.archive.max.storage={{ nifi_flow_configuration_archive_max_storage }}
nifi.flow.configuration.archive.max.count={{ nifi_flow_configuration_archive_max_count }}
nifi.flowcontroller.autoResumeState={{ nifi_flowcontroller_auto_resume_state | ternary('true', 'false') }}
nifi.flowcontroller.graceful.shutdown.period={{ nifi_flowcontroller_graceful_shutdown_period }}
nifi.flowservice.writedelay.interval={{ nifi_flowservice_writedelay_interval }}
nifi.administrative.yield.duration={{ nifi_administrative_yield_duration }}
# If a component has no work to do (is "bored"), how long should we wait before checking again for work?
nifi.bored.yield.duration={{ nifi_bored_yield_duration }}
nifi.queue.backpressure.count={{ nifi_queue_backpressure_count }}
nifi.queue.backpressure.size={{ nifi_queue_backpressure_size }}

nifi.authorizer.configuration.file={{ nifi_authorizer_configuration_file }}
nifi.login.identity.provider.configuration.file={{ nifi_login_identity_provider_configuration_file }}
nifi.templates.directory={{ nifi_templates_directory }}
nifi.ui.banner.text=
nifi.ui.autorefresh.interval={{ nifi_ui_autorefresh_interval}}
nifi.nar.library.directory={{ nifi_nar_library_directory }}
nifi.nar.library.autoload.directory={{ nifi_nar_library_autoload_directory }}
nifi.nar.working.directory={{ nifi_nar_working_directory }}
nifi.documentation.working.directory={{ nifi_documentation_working_directory }}

####################
# State Management #
####################
nifi.state.management.configuration.file={{ nifi_state_management_configuration_file }}
# The ID of the local state provider
nifi.state.management.provider.local={{ nifi_state_management_provider_local }}
# The ID of the cluster-wide state provider. This will be ignored if NiFi is not clustered but must be populated if running in a cluster.
nifi.state.management.provider.cluster={{ nifi_state_management_provider_cluster }}
# Specifies whether or not this instance of NiFi should run an embedded ZooKeeper server
nifi.state.management.embedded.zookeeper.start={{ nifi_state_management_embedded_zookeeper_start | ternary('true', 'false') }}
# Properties file that provides the ZooKeeper properties to use if <nifi.state.management.embedded.zookeeper.start> is set to true
nifi.state.management.embedded.zookeeper.properties={{ nifi_state_management_embedded_zookeeper_properties }}

# H2 Settings
nifi.database.directory={{ nifi_database_directory }}
nifi.h2.url.append={{ nifi_h2_url_append }}

# Repository Encryption properties override individual repository implementation properties
nifi.repository.encryption.protocol.version={{ nifi_repository_encryption_protocol_version }}
nifi.repository.encryption.key.id={{ nifi_repository_encryption_key_id }}
nifi.repository.encryption.key.provider={{ nifi_repository_encryption_key_provider }}
nifi.repository.encryption.key.provider.keystore.location={{ nifi_repository_encryption_key_provider_keystore_location }}
nifi.repository.encryption.key.provider.keystore.password={{ nifi_repository_encryption_key_provider_keystore_password }}

# FlowFile Repository
nifi.flowfile.repository.implementation={{ nifi_flowfile_repository_implementation }}
nifi.flowfile.repository.wal.implementation={{ nifi_flowfile_repository_wal_implementation }}
nifi.flowfile.repository.directory={{ nifi_flowfile_repository_directory }}
nifi.flowfile.repository.checkpoint.interval={{ nifi_flowfile_repository_checkpoint_interval }}
nifi.flowfile.repository.always.sync={{ nifi_flowfile_repository_always_sync | ternary('true', 'false') }}
nifi.flowfile.repository.retain.orphaned.flowfiles={{ nifi_flowfile_repository_retain_orphaned_flowfiles | ternary('true', 'false') }}

nifi.swap.manager.implementation={{ nifi_swap_manager_implementation }}
nifi.queue.swap.threshold={{ nifi_queue_swap_threshold }}

# Content Repository
nifi.content.repository.implementation={{ nifi_content_repository_implementation }}
nifi.content.claim.max.appendable.size={{ nifi_content_claim_max_appendable_size }}
nifi.content.repository.directory.default={{ nifi_content_repository_directory_default }}
nifi.content.repository.archive.max.retention.period={{ nifi_content_repository_archive_max_retention_period }}
nifi.content.repository.archive.max.usage.percentage={{ nifi_content_repository_archive_max_usage_percentage }}
nifi.content.repository.archive.enabled={{ nifi_content_repository_archive_enabled | ternary('true', 'false') }}
nifi.content.repository.always.sync={{ nifi_content_repository_always_sync | ternary('true', 'false') }}
nifi.content.viewer.url={{ nifi_content_viewer_url }}

# Provenance Repository Properties
nifi.provenance.repository.implementation={{ nifi_provenance_repository_implementation }}

# Persistent Provenance Repository Properties
nifi.provenance.repository.directory.default={{ nifi_provenance_repository_directory_default }}
nifi.provenance.repository.max.storage.time={{ nifi_provenance_repository_max_storage_time }}
nifi.provenance.repository.max.storage.size={{ nifi_provenance_repository_max_storage_size }}
nifi.provenance.repository.rollover.time={{ nifi_provenance_repository_rollover_time }}
nifi.provenance.repository.rollover.size={{ nifi_provenance_repository_rollover_size }}
nifi.provenance.repository.query.threads={{ nifi_provenance_repository_query_threads }}
nifi.provenance.repository.index.threads={{ nifi_provenance_repository_index_threads }}
nifi.provenance.repository.compress.on.rollover={{ nifi_provenance_repository_compress_on_rollover | ternary('true', 'false') }}
nifi.provenance.repository.always.sync={{ nifi_provenance_repository_always_sync | ternary('true', 'false') }}
# Comma-separated list of fields. Fields that are not indexed will not be searchable. Valid fields are:
# EventType, FlowFileUUID, Filename, TransitURI, ProcessorID, AlternateIdentifierURI, Relationship, Details
nifi.provenance.repository.indexed.fields={{ nifi_provenance_repository_indexed_fields | join(',') }}
# FlowFile Attributes that should be indexed and made searchable.  Some examples to consider are filename, uuid, mime.type
nifi.provenance.repository.indexed.attributes={{ nifi_provenance_repository_indexed_attributes }}
# Large values for the shard size will result in more Java heap usage when searching the Provenance Repository
# but should provide better performance
nifi.provenance.repository.index.shard.size={{ nifi_provenance_repository_index_shard_size }}
# Indicates the maximum length that a FlowFile attribute can be when retrieving a Provenance Event from
# the repository. If the length of any attribute exceeds this value, it will be truncated when the event is retrieved.
nifi.provenance.repository.max.attribute.length={{ nifi_provenance_repository_max_attribute_length }}
nifi.provenance.repository.concurrent.merge.threads={{ nifi_provenance_repository_concurrent_merge_threads }}


# Volatile Provenance Respository Properties
nifi.provenance.repository.buffer.size={{ nifi_provenance_repository_buffer_size }}

# Component and Node Status History Repository
nifi.components.status.repository.implementation={{ nifi_components_status_repository_implementation }}

# Volatile Status History Repository Properties
nifi.components.status.repository.buffer.size={{ nifi_components_status_repository_buffer_size }}
nifi.components.status.snapshot.frequency={{ nifi_components_status_snapshot_frequency }}

# QuestDB Status History Repository Properties
nifi.status.repository.questdb.persist.node.days={{ nifi_status_repository_questdb_persist_node_days }}
nifi.status.repository.questdb.persist.component.days={{ nifi_status_repository_questdb_persist_component_days }}
nifi.status.repository.questdb.persist.location={{ nifi_status_repository_questdb_persist_location }}

# Site to Site properties
nifi.remote.input.host={{ nifi_remote_input_host }}
nifi.remote.input.secure={{ nifi_remote_input_secure | ternary('true', 'false') }}
nifi.remote.input.socket.port={{ nifi_remote_input_socket_port }}
nifi.remote.input.http.enabled={{ nifi_remote_input_http_enabled | ternary('true', 'false') }}
nifi.remote.input.http.transaction.ttl={{ nifi_remote_input_http_transaction_ttl }}
nifi.remote.contents.cache.expiration={{ nifi_remote_contents_cache_expiration }}

# web properties #
#############################################

# For security, NiFi will present the UI on 127.0.0.1 and only be accessible through this loopback interface.
# Be aware that changing these properties may affect how your instance can be accessed without any restriction.
# We recommend configuring HTTPS instead. The administrators guide provides instructions on how to do this.

nifi.web.http.host={{ nifi_web_http_host }}
nifi.web.http.port={{ nifi_web_http_port }}
nifi.web.http.network.interface.default={{ nifi_web_http_network_interface_default }}

#############################################

nifi.web.https.host={{ nifi_web_https_host }}
nifi.web.https.port={{ nifi_web_https_port }}
nifi.web.https.network.interface.default={{ nifi_web_https_network_interface_default }}
nifi.web.jetty.working.directory={{ nifi_web_jetty_working_directory }}
nifi.web.jetty.threads={{ nifi_web_jetty_threads }}
nifi.web.max.header.size={{ nifi_web_max_header_size }}
nifi.web.proxy.context.path={{ nifi_web_proxy_context_path }}
nifi.web.proxy.host={{ nifi_web_proxy_host | join(',') }}
nifi.web.max.content.size={{ nifi_web_max_content_size }}
nifi.web.max.requests.per.second={{ nifi_web_max_requests_per_second }}
nifi.web.max.access.token.requests.per.second={{ nifi_web_max_access_token_requests_per_second }}
nifi.web.request.timeout={{ nifi_web_request_timeout }}
nifi.web.request.ip.whitelist={{ nifi_web_request_ip_whitelist | join(',') }}
nifi.web.should.send.server.version={{ nifi_web_should_send_server_version | ternary('true', 'false') }}

# Include or Exclude TLS Cipher Suites for HTTPS
nifi.web.https.ciphersuites.include={{ nifi_web_https_ciphersuites_include | join(',') }}
nifi.web.https.ciphersuites.exclude={{ nifi_web_https_ciphersuites_exclude | join(',') }}

# security properties #
nifi.sensitive.props.key={{ nifi_sensitive_props_key }}
nifi.sensitive.props.key.protected={{ nifi_sensitive_props_key_protected }}
nifi.sensitive.props.algorithm={{ nifi_sensitive_props_algorithm }}
nifi.sensitive.props.additional.keys={{ nifi_sensitive_props_additional_keys | join (',') }}

nifi.security.autoreload.enabled={{ nifi_security_autoreload_enabled | ternary('true', 'false') }}
nifi.security.autoreload.interval={{ nifi_security_autoreload_interval }}
nifi.security.keystore={{ nifi_security_keystore }}
nifi.security.keystoreType={{ nifi_security_keystore_type }}
nifi.security.keystorePasswd={{ nifi_security_keystore_passwd }}
nifi.security.keyPasswd={{ nifi_security_key_passwd }}
nifi.security.truststore={{ nifi_security_truststore }}
nifi.security.truststoreType={{ nifi_security_truststore_type }}
nifi.security.truststorePasswd={{ nifi_security_truststore_passwd }}
nifi.security.user.authorizer={{ nifi_security_user_authorizer }}
nifi.security.allow.anonymous.authentication={{ nifi_security_allow_anonymous_authentication | ternary('true', 'false') }}
nifi.security.user.login.identity.provider={{ nifi_security_user_login_identity_provider }}
nifi.security.user.jws.key.rotation.period={{ nifi_security_user_jws_key_rotation_period }}
nifi.security.ocsp.responder.url={{ nifi_security_ocsp_responder_url }}
nifi.security.ocsp.responder.certificate={{ nifi_security_ocsp_responder_certificate }}

# OpenId Connect SSO Properties #
nifi.security.user.oidc.discovery.url={{ nifi_security_user_oidc_discovery_url }}
nifi.security.user.oidc.connect.timeout={{ nifi_security_user_oidc_connect_timeout }}
nifi.security.user.oidc.read.timeout={{ nifi_security_user_oidc_read_timeout }}
nifi.security.user.oidc.client.id={{ nifi_security_user_oidc_client_id }}
nifi.security.user.oidc.client.secret={{ nifi_security_user_oidc_client_secret }}
nifi.security.user.oidc.preferred.jwsalgorithm={{ nifi_security_user_oidc_preferred_jwsalgorithm }}
nifi.security.user.oidc.additional.scopes={{ nifi_security_user_oidc_additional_scopes | join(',') }}
nifi.security.user.oidc.claim.identifying.user={{ nifi_security_user_oidc_claim_identifying_user }}
nifi.security.user.oidc.fallback.claims.identifying.user={{ nifi_security_user_oidc_fallback_claims_identifying_user }}

# Apache Knox SSO Properties #
nifi.security.user.knox.url={{ nifi_security_user_knox_url }}
nifi.security.user.knox.publicKey={{ nifi_security_user_knox_public_key }}
nifi.security.user.knox.cookieName={{ nifi_security_user_knox_cookie_name }}
nifi.security.user.knox.audiences={{ nifi_security_user_knox_audiences }}

# SAML Properties #
nifi.security.user.saml.idp.metadata.url={{ nifi_security_user_saml_idp_metadata_url }}
nifi.security.user.saml.sp.entity.id={{ nifi_security_user_saml_sp_entity_id }}
nifi.security.user.saml.identity.attribute.name={{ nifi_security_user_saml_identity_attribute_name }}
nifi.security.user.saml.group.attribute.name={{ nifi_security_user_saml_group_attribute_name }}
nifi.security.user.saml.metadata.signing.enabled={{ nifi_security_user_saml_metadata_signing_enabled | ternary('true', 'false') }}
nifi.security.user.saml.request.signing.enabled={{ nifi_security_user_saml_request_signing_enabled | ternary('true', 'false') }}
nifi.security.user.saml.want.assertions.signed={{ nifi_security_user_saml_want_assertions_signed | ternary('true', 'false') }}
nifi.security.user.saml.signature.algorithm={{ nifi_security_user_saml_signature_algorithm }}
nifi.security.user.saml.signature.digest.algorithm={{ nifi_security_user_saml_signature_digest_algorithm }}
nifi.security.user.saml.message.logging.enabled={{ nifi_security_user_saml_message_logging_enabled | ternary('true', 'false') }}
nifi.security.user.saml.authentication.expiration={{ nifi_security_user_saml_authentication_expiration }}
nifi.security.user.saml.single.logout.enabled={{ nifi_security_user_saml_single_logout_enabled | ternary('true', 'false') }}
nifi.security.user.saml.http.client.truststore.strategy={{ nifi_security_user_saml_http_client_truststore_strategy }}
nifi.security.user.saml.http.client.connect.timeout={{ nifi_security_user_saml_http_client_connect_timeout }}
nifi.security.user.saml.http.client.read.timeout={{ nifi_security_user_saml_http_client_read_timeout }}

# Identity Mapping Properties #
# These properties allow normalizing user identities such that identities coming from different identity providers
# (certificates, LDAP, Kerberos) can be treated the same internally in NiFi. The following example demonstrates normalizing
# DNs from certificates and principals from Kerberos into a common identity string:
#
# nifi.security.identity.mapping.pattern.dn=^CN=(.*?), OU=(.*?), O=(.*?), L=(.*?), ST=(.*?), C=(.*?)$
# nifi.security.identity.mapping.value.dn=$1@$2
# nifi.security.identity.mapping.transform.dn=NONE
# nifi.security.identity.mapping.pattern.kerb=^(.*?)/instance@(.*?)$
# nifi.security.identity.mapping.value.kerb=$1@$2
# nifi.security.identity.mapping.transform.kerb=UPPER

# Group Mapping Properties #
# These properties allow normalizing group names coming from external sources like LDAP. The following example
# lowercases any group name.
#
# nifi.security.group.mapping.pattern.anygroup=^(.*)$
# nifi.security.group.mapping.value.anygroup=$1
# nifi.security.group.mapping.transform.anygroup=LOWER

# cluster common properties (all nodes must have same values) #
nifi.cluster.protocol.heartbeat.interval={{ nifi_cluster_protocol_heartbeat_interval }}
nifi.cluster.protocol.heartbeat.missable.max={{ nifi_cluster_protocol_heartbeat_missable_max }}
nifi.cluster.protocol.is.secure={{ nifi_cluster_protocol_is_secure | ternary('true', 'false') }}

# cluster node properties (only configure for cluster nodes) #
nifi.cluster.is.node={{ nifi_cluster_is_node | ternary('true', 'false') }}
nifi.cluster.node.address={{ nifi_cluster_node_address }}
nifi.cluster.node.protocol.port={{ nifi_cluster_node_protocol_port }}
nifi.cluster.node.protocol.max.threads={{ nifi_cluster_node_protocol_max_threads }}
nifi.cluster.node.event.history.size={{ nifi_cluster_node_event_history_size }}
nifi.cluster.node.connection.timeout={{ nifi_cluster_node_connection_timeout }}
nifi.cluster.node.read.timeout={{ nifi_cluster_node_read_timeout }}
nifi.cluster.node.max.concurrent.requests={{ nifi_cluster_node_max_concurrent_requests }}
nifi.cluster.firewall.file={{ nifi_cluster_firewall_file }}
nifi.cluster.flow.election.max.wait.time={{ nifi_cluster_flow_election_max_wait_time }}
nifi.cluster.flow.election.max.candidates={{ nifi_cluster_flow_election_max_candidates }}

# cluster load balancing properties #
nifi.cluster.load.balance.host={{ nifi_cluster_load_balance_host }}
nifi.cluster.load.balance.port={{ nifi_cluster_load_balance_port }}
nifi.cluster.load.balance.connections.per.node={{ nifi_cluster_load_balance_connections_per_node }}
nifi.cluster.load.balance.max.thread.count={{ nifi_cluster_load_balance_max_thread_count }}
nifi.cluster.load.balance.comms.timeout={{ nifi_cluster_load_balance_comms_timeout }}

# zookeeper properties, used for cluster management #
nifi.zookeeper.connect.string={{ nifi_zookeeper_connect_string }}
nifi.zookeeper.connect.timeout={{ nifi_zookeeper_connect_timeout }}
nifi.zookeeper.session.timeout={{ nifi_zookeeper_session_timeout }}
nifi.zookeeper.root.node={{ nifi_zookeeper_root_node }}
nifi.zookeeper.client.secure={{ nifi_zookeeper_client_secure | ternary('true', 'false') }}
nifi.zookeeper.security.keystore={{ nifi_zookeeper_security_keystore }}
nifi.zookeeper.security.keystoreType={{ nifi_zookeeper_security_keystore_type }}
nifi.zookeeper.security.keystorePasswd={{ nifi_zookeeper_security_keystore_passwd }}
nifi.zookeeper.security.truststore={{ nifi_zookeeper_security_truststore }}
nifi.zookeeper.security.truststoreType={{ nifi_zookeeper_security_truststore_type }}
nifi.zookeeper.security.truststorePasswd={{ nifi_zookeeper_security_truststore_passwd }}
nifi.zookeeper.jute.maxbuffer={{ nifi_zookeeper_jute_maxbuffer }}

# Zookeeper properties for the authentication scheme used when creating acls on znodes used for cluster management
# Values supported for nifi.zookeeper.auth.type are "default", which will apply world/anyone rights on znodes
# and "sasl" which will give rights to the sasl/kerberos identity used to authenticate the nifi node
# The identity is determined using the value in nifi.kerberos.service.principal and the removeHostFromPrincipal
# and removeRealmFromPrincipal values (which should align with the kerberos.removeHostFromPrincipal and kerberos.removeRealmFromPrincipal
# values configured on the zookeeper server).
nifi.zookeeper.auth.type=
nifi.zookeeper.kerberos.removeHostFromPrincipal={{ nifi_zookeeper_kerberos_remove_host_from_principal | ternary('true', 'false') }}
nifi.zookeeper.kerberos.removeRealmFromPrincipal={{ nifi_zookeeper_kerberos_remove_realm_from_principal | ternary('true', 'false') }}

# kerberos #
nifi.kerberos.krb5.file={{ nifi_kerberos_krb5_file }}

# kerberos service principal #
nifi.kerberos.service.principal={{ nifi_kerberos_service_principal }}
nifi.kerberos.service.keytab.location={{ nifi_kerberos_service_keytab_location }}

# kerberos spnego principal #
nifi.kerberos.spnego.principal={{ nifi_kerberos_spnego_principal }}
nifi.kerberos.spnego.keytab.location={{ nifi_kerberos_spnego_keytab_location }}
nifi.kerberos.spnego.authentication.expiration={{ nifi_kerberos_spnego_authentication_expiration }}

# external properties files for variable registry
# supports a comma delimited list of file locations
nifi.variable.registry.properties={{ nifi_variable_registry_properties }}

# analytics properties #
nifi.analytics.predict.enabled={{ nifi_analytics_predict_enabled| ternary('true', 'false') }}
nifi.analytics.predict.interval={{ nifi_analytics_predict_interval }}
nifi.analytics.query.interval={{ nifi_analytics_query_interval }}
nifi.analytics.connection.model.implementation={{ nifi_analytics_connection_model_implementation }}
nifi.analytics.connection.model.score.name={{ nifi_analytics_connection_model_score_name }}
nifi.analytics.connection.model.score.threshold={{ nifi_analytics_connection_model_score_threshold }}

# runtime monitoring properties
nifi.monitor.long.running.task.schedule=
nifi.monitor.long.running.task.threshold=

# Create automatic diagnostics when stopping/restarting NiFi.

# Enable automatic diagnostic at shutdown.
nifi.diagnostics.on.shutdown.enabled=false

# Include verbose diagnostic information.
nifi.diagnostics.on.shutdown.verbose=false

# The location of the diagnostics folder.
nifi.diagnostics.on.shutdown.directory=./diagnostics

# The maximum number of files permitted in the directory. If the limit is exceeded, the oldest files are deleted.
nifi.diagnostics.on.shutdown.max.filecount=10

# The diagnostics folder's maximum permitted size in bytes. If the limit is exceeded, the oldest files are deleted.
nifi.diagnostics.on.shutdown.max.directory.size=10 MB
